-- Products table
create table public.products (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  product character varying not null,
  price double precision null,
  "productDescription" character varying null,
  "productName" character varying not null,
  colors text[] null,
  "imageUrl" character varying null,
  "isNew" boolean null default false,
  category text null,
  discount numeric null,
  rating real null,
  reviews integer null,
  constraint products_pkey primary key (id),
  constraint products_id_key unique (id)
) TABLESPACE pg_default;

-- Wishlist table
create table public.wishlist (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  product_id bigint null,
  user_id uuid null,
  constraint wishlist_pkey primary key (id),
  constraint wishlist_id_key unique (id)
) TABLESPACE pg_default;

-- Cart table
create table public.cart (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  product_id bigint null,
  user_id uuid null,
  quantity bigint null default '1'::bigint,
  constraint cart_pkey primary key (id),
  constraint cart_id_key unique (id),
  constraint cart_quantity_check check ((quantity > 0))
) TABLESPACE pg_default;

-- Enable Row Level Security (RLS)
alter table public.profiles enable row level security;
alter table public.products enable row level security;
alter table public.wishlist enable row level security;
alter table public.cart enable row level security;


-- Products policies
create policy "Products are viewable by everyone"
  on public.products for select
  using (true);

-- Cart policies
create policy "Users can view their own cart"
  on public.cart for select
  using (auth.uid() = user_id);

create policy "Users can insert their own cart"
  on public.cart for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own cart"
  on public.cart for update
  using (auth.uid() = user_id);

create policy "Users can delete their own cart"
  on public.cart for delete
  using (auth.uid() = user_id);

-- Storage policy for product images
create policy "Product images are publicly accessible"
  on storage.objects for select
  using (bucket_id = 'products');

-- Database indexes for better query performance
create index products_category_id_idx on public.products(category_id);
create index cart_user_id_idx on public.cart(user_id);
create index cart_product_id_idx on public.cart(product_id);
create index wishlist_user_id_idx on public.wishlist(user_id);
create index wishlist_product_id_idx on public.wishlist(product_id);